@page "/Pagination"
<h1>Pagination</h1>
<div class="pagination">
    @if (TotalPages > 5 && CurrentPage > 1)
    {
        <button type="button" @onclick="() => ChangePage(CurrentPage - 1)">@("<")</button>
    }
    @for (int i = StartPage; i <= EndPage; i++)
    {
        var pageNumber = i;
        <button type="button" class="@(pageNumber == CurrentPage ? "active" : "")" @onclick="() => ChangePage(pageNumber)" disabled="@(CurrentPage == pageNumber)">@i</button>
    }
    @if (TotalPages > 5 && CurrentPage < TotalPages)
    {
        <button type="button" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">@(">")</button>
    }
</div>
@code {
    [Parameter] public int TotalPages { get; set; } = 6;
    [Parameter] public EventCallback<int> CurrentPageChanged { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int StartPage { get; set; }
    private int EndPage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Paginate();
        await base.OnParametersSetAsync();
    }

    private void ChangePage(int page)
    {
        if (page != CurrentPage)
        {
            CurrentPage = page;
            Paginate();
        }
    }

    private void Paginate()
    {
        if (TotalPages <= 0)
        {
            StartPage = 1;
            EndPage = 1;
        }
        else if (TotalPages <= 5)
        {
            StartPage = 1;
            EndPage = TotalPages;
        }
        else
        {
            if (CurrentPage <= 3)
            {
                StartPage = 1;
                EndPage = 5;
            }
            else if (CurrentPage + 2 >= TotalPages)
            {
                StartPage = TotalPages - 4;
                EndPage = TotalPages;
            }
            else
            {
                StartPage = CurrentPage - 2;
                EndPage = CurrentPage + 2;
            }
        }
    }
}
