@page "/ImageColorChange"
@inject HttpClient Http
<div class="images-container">
    <h1>Image Color Change</h1>
    <div class="images">
        <div class="image-input">
            <div class="drop-zone">
                <InputFile OnChange="OnImageSelected" accept="image/*" />
            </div>
            @if (!string.IsNullOrEmpty(imageBase64))
            {
                <img src="@($"data:image;base64,{imageBase64}")" alt="Selected Image" />
            }
        </div>
        <div class="image-output">
            @if (isLoading)
            {
                <p>⌛</p>
            }
            else if (!string.IsNullOrEmpty(newImageBase64))
            {
                <img src="@($"data:image;base64,{newImageBase64}")" alt="Modified Image" />
            }
        </div>
    </div>
    @if (!string.IsNullOrEmpty(newImageBase64) && !isLoading && imageFile is not null)
    {
        <a class="download"
           href="@($"data:{imageFile.ContentType};base64,{newImageBase64}")"
           download="@($"new_{imageFile.Name}")">
            Download
        </a>
    }
    else
    {
        <button type="button" class="download" disabled>Download</button>
    }
</div>

@code {
    private string? imageBase64;
    private string? newImageBase64;
    private IBrowserFile? imageFile;
    private bool isLoading;

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
        if (imageFile != null)
        {
            const long maxFileSize = 1024 * 1024 * 4;
            var buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream(maxFileSize).ReadAsync(buffer);
            imageBase64 = Convert.ToBase64String(buffer);
            newImageBase64 = null;
            await ChangeImageColor();
        }
    }

    private async Task ChangeImageColor()
    {
        if (imageFile is null)
            return;

        isLoading = true;
        await Task.Delay(1);

        try
        {
            using var content = new MultipartFormDataContent();
            using var fileStream = imageFile.OpenReadStream(imageFile.Size);
            content.Add(new StreamContent(fileStream), "file", imageFile.Name);

            var response = await Http.PostAsync("/api/image/change-color", content);

            if (response.IsSuccessStatusCode)
            {
                newImageBase64 = await response.Content.ReadAsStringAsync();
            }
        }
        finally
        {
            isLoading = false;
        }
    }
}
